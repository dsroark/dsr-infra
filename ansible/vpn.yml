---

- name: install duckdns for dynamic dns updates
  hosts:
    - tag_env_{{ env }}
  become: yes
  user: ubuntu
  tags: dyndns

  roles:
    - rofrantz.duckdns

- name: configure ca server
  hosts: tag_function_caserver:&tag_env_{{ env }}
  user: ubuntu
  become: yes
  tags: certs

  tasks:
  - name: make ca dir
    file:
      path: /srv/ca
      owner: root
      group: root
      mode: '0600'
      state: directory
    register: ca_dir
    tags: stop

  - name: make easyrsa dir
    file:
      path: /usr/local/share/easyrsa
      mode: '0755'
      state: directory

  - name: download and unpack easyrsa
    unarchive:
      src: https://github.com/OpenVPN/easy-rsa/releases/download/v3.0.6/EasyRSA-unix-v3.0.6.tgz
      dest: /usr/local/share/easyrsa
      remote_src: yes
      extra_opts:
        - --strip-components
        - '1'

  - name: init pki directory
    command: /usr/local/share/easyrsa/easyrsa --pki-dir={{ ca_dir.path }} --batch init-pki
    args:
      creates: "{{ ca_dir.path }}/openssl-easyrsa.cnf"

  - name: create .rnd folder
    command: dd if=/dev/urandom of={{ ca_dir.path }}/.rnd bs=256 count=1
    args:
      creates: "{{ ca_dir.path }}/.rnd"

  - name: build ca
    shell: echo 'beaglesinc' | /usr/local/share/easyrsa/easyrsa --pki-dir={{ ca_dir.path }} --batch build-ca nopass
    args:
      creates: "{{ ca_dir.path }}/ca.crt"


- name: configure vpn server
  hosts: tag_function_vpnserver:&tag_env_{{ env }}
  user: ubuntu
  become: yes

  tasks:
  - name: install packages
    apt:
      name: "{{ packages }}"
      state: latest
    vars:
      packages:
        - openvpn
    tags: openvpn

  - name: openvpn firewall port
    ufw:
      rule: allow
      port: 1194
      proto: udp
    tags: openvpn

  - name: make easyrsa dir
    file:
      path: /usr/local/share/easyrsa
      mode: '0755'
      state: directory
    tags:
      - openvpn
      - certs

  - name: download and unpack easyrsa
    unarchive:
      src: https://github.com/OpenVPN/easy-rsa/releases/download/v3.0.6/EasyRSA-unix-v3.0.6.tgz
      dest: /usr/local/share/easyrsa
      remote_src: yes
      extra_opts:
        - --strip-components
        - '1'
    tags:
      - openvpn
      - certs

  - name: set ipv4 forwarding
    sysctl:
       name: net.ipv4.ip_forward
       value: 1
       state: present
    tags: openvpn

  - name: init pki directory
    command: /usr/local/share/easyrsa/easyrsa --pki-dir=/etc/openvpn/{{ item }} --batch init-pki
    args:
      creates: "/etc/openvpn/{{ item }}/openssl-easyrsa.cnf"
    loop:
      - "server"
      - "client"
    tags: certs

  - name: create .rnd file
    command: dd if=/dev/urandom of=/etc/openvpn/{{ item }}/.rnd bs=256 count=1
    args:
      creates: "/etc/openvpn/{{ item }}/.rnd"
    loop:
      - "server"
      - "client"
    tags: certs

  - name: create cert req
    shell: echo '{{ item }}' | /usr/local/share/easyrsa/easyrsa --pki-dir=/etc/openvpn/{{ item }} --batch gen-req {{ item }}  nopass
    args:
      creates: "/etc/openvpn/{{ item }}/private/{{ item }}.key"
    loop:
      - "server"
      - "client"
    tags: certs

  - name: register contents of server req file to a variable
    slurp:
      src: /etc/openvpn/server/reqs/server.req
    register: "server_req"
    tags: certs

  - name: register contents of client req file to a variable
    slurp:
      src: /etc/openvpn/client/reqs/client.req
    register: "client_req"
    tags: certs

- name: transfer vpn requests to host vars for ca server
  hosts:
    - tag_env_{{ env }}
  tasks:
    - name: set facts for request
      set_fact:
        server_req: "{{ hostvars[ansible_play_batch | intersect(groups.tag_function_vpnserver) | first].server_req }}"
        client_req: "{{ hostvars[ansible_play_batch | intersect(groups.tag_function_vpnserver) | first].client_req }}"
      when: "'tag_function_caserver' in group_names"

- name: sign the cert on the ca server
  hosts: tag_function_caserver:&tag_env_{{ env }}
  user: ubuntu
  become: yes
  tags: certs
  tasks:
    - name: write req file to ca server
      copy:
        content: "{{ item.content | b64decode }}"
        dest: /tmp/{{ item.source | basename }}
      loop:
        - "{{ server_req }}"
        - "{{ client_req }}"

    - name: import req file
      command: /usr/local/share/easyrsa/easyrsa --pki-dir=/srv/ca import-req /tmp/{{ item }}.req {{ item }}
      args:
        creates: /srv/ca/reqs/{{ item }}.req
      loop:
        - "server"
        - "client"

    - name: sign req file
      command: /usr/local/share/easyrsa/easyrsa --batch --pki-dir=/srv/ca sign-req {{ item }} {{ item }}
      args:
        creates: /srv/ca/issued/{{ item }}.crt
      loop:
        - "server"
        - "client"

    - name: register ca file
      slurp:
        src: /srv/ca/ca.crt
      register: ca_crt

    - name: register server cert
      slurp:
        src: /srv/ca/issued/server.crt
      register: "server_crt"

    - name: register client cert
      slurp:
        src: /srv/ca/issued/client.crt
      register: "client_crt"

- name: transfer vpn certs to host vars for ca server
  hosts: tag_env_{{ env }}
  user: ubuntu
  tasks:
    - name: set facts for request
      set_fact:
        ca_crt: "{{ hostvars[ansible_play_batch | intersect(groups.tag_function_caserver) | first].ca_crt }}"
        server_crt: "{{ hostvars[ansible_play_batch | intersect(groups.tag_function_caserver) | first].server_crt }}"
        client_crt: "{{ hostvars[ansible_play_batch | intersect(groups.tag_function_caserver) | first].client_crt }}"
      when: "'tag_function_vpnserver' in group_names"

- name: Set up openvpn with signed certs
  hosts: tag_function_vpnserver:&tag_env_{{ env }}
  user: ubuntu
  become: yes
  vars:

  handlers:
    - name: restart openvpn
      systemd:
        name: openvpn@server
        state: restarted


  tasks:
    - name: copy certs to openvpn dir
      copy:
        content: "{{ item.content | b64decode }}"
        dest: /etc/openvpn/{{ item.source | basename }}
      loop:
        - "{{ ca_crt }}"
        - "{{ server_crt }}"
        - "{{ client_crt }}"
      tags:
        - certs

    - name: generate dh (this will take a few minutes)
      command: /usr/local/share/easyrsa/easyrsa --pki-dir=/etc/openvpn/server gen-dh
      args:
        creates: /etc/openvpn/server/dh.pem
      tags: openvpn

    - name: generate HMAC signature
      command: openvpn --genkey --secret ta.key
      args:
        chdir: /etc/openvpn
        creates: /etc/openvpn/ta.key
      tags: openvpn
# openvpn specific
    - name: place server.conf file
      template:
        src: server.conf.j2
        dest: /etc/openvpn/server.conf
      notify: restart openvpn
      tags: openvpn

    - name: enable openvpn
      systemd:
        name: openvpn@server
        state: started
        enabled: yes
      tags: openvpn
# configure client
    - name: create client-config dir
      file:
        path: "{{ item }}"
        state: directory
      loop:
        - '/usr/local/share/vpn-client-configs'
        - '/usr/local/share/vpn-client-configs/files'
        - '/usr/local/share/vpn-client-configs/keys'
      tags: openvpn

    - name: place make_config.sh script
      template:
        src: make_config.sh.j2
        dest: /usr/local/share/vpn-client-configs/make_config.sh
        mode: 0700
      tags: openvpn

    - name: copy client key 1
      copy:
        src: "{{ item }}"
        dest: /usr/local/share/vpn-client-configs/keys/{{ item | basename }}
        remote_src: yes
      loop:
        - '/etc/openvpn/client.crt'
        - '/etc/openvpn/client/private/client.key'
        - '/etc/openvpn/server/dh.pem'
        - '/etc/openvpn/ta.key'
        - '/etc/openvpn/ca.crt'
      tags: openvpn

    - name: place base config
      template:
        src: base.conf.j2
        dest: /usr/local/share/vpn-client-configs/base.conf
      tags: openvpn
    - name: run make_config script
      command: /usr/local/share/vpn-client-configs/make_config.sh client
      args:
        creates: /usr/local/share/vpn-client-configs/files/client.ovpn
      tags: openvpn
